  import React, { useEffect } from "react";

  const CategoriesTagsReviews = ({
    activeTab,
    isCategoryDropdownVisible,
    isTagDropdownVisible,
    filteredCategories,
    filteredTags,
    searchTerm,
    tagSearchTerm,
    setSearchTerm,
    setTagSearchTerm,
    categories,
    tags,
    reviews,
    activeCategory,
    activeTag,
    setActiveCategory,
    setActiveTag,
    setIsCategoryDropdownVisible,
    setIsTagDropdownVisible,
    filteredReviews,
  }) => {
    // Filter reviews based on selected category, tag, and active tab
    const getFilteredReviews = () => {
      let allReviews = Object.values(reviews).flat(); // Combine all reviews into one array

      // Filter by category if activeCategory is selected
      if (activeCategory) {
        allReviews = allReviews.filter((review) =>
          review.tags.includes(activeCategory)
        );
      }

      // Further filter by tag if activeTag is selected
      if (activeTag) {
        allReviews = allReviews.filter((review) =>
          review.tags.includes(activeTag)
        );
      }

      if (activeTab === "hot") {
        return allReviews.sort(
          (a, b) =>
            parseInt(b.views.replace("k", "000")) -
            parseInt(a.views.replace("k", "000"))
        );
      }
      if (activeTab === "latest") {
        return allReviews.sort(
          (a, b) => new Date(b.activity) - new Date(a.activity)
        );
      }

      return allReviews;
    };

    // Close dropdowns when clicking outside
    useEffect(() => {
      const handleClickOutside = (e) => {
        const categoryDropdown = document.querySelector(".category-dropdown");
        const tagDropdown = document.querySelector(".tag-dropdown");
    
        // Check if click is outside both dropdowns
        if (
          (categoryDropdown && !categoryDropdown.contains(e.target)) &&
          (tagDropdown && !tagDropdown.contains(e.target))
        ) {
          setIsCategoryDropdownVisible(false);
          setIsTagDropdownVisible(false);
        }
      };
    
      document.addEventListener("click", handleClickOutside);
    
      return () => {
        document.removeEventListener("click", handleClickOutside);
      };
    }, [setIsCategoryDropdownVisible, setIsTagDropdownVisible]);

    return (
      <>
        {/* Selected Filters Display */}
        <div className="mb-4">
          {activeCategory && (
            <span className="bg-fuchsia-600 text-white px-2 py-1 rounded-lg mr-2">
              Category: {activeCategory}{" "}
              <button
                onClick={() => setActiveCategory(null)}
                className="ml-2 text-gray-200"
              >
                ✕
              </button>
            </span>
          )}
          {activeTag && (
            <span className="bg-blue-600 text-white px-2 py-1 rounded-lg">
              Tag: {activeTag}{" "}
              <button
                onClick={() => setActiveTag(null)}
                className="ml-2 text-gray-200"
              >
                ✕
              </button>
            </span>
          )}
        </div>

        {/* Categories Dropdown */}
        {isCategoryDropdownVisible && activeTab === "categories" && (
          <div className="absolute bg-gray-800 rounded-lg shadow-lg mt-2 py-2 px-4 category-dropdown">
            <input
              type="text"
              className="w-full p-2 mb-2 rounded-lg bg-gray-900 text-white"
              placeholder="Search Categories"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <ul className="flex flex-col h-42 overflow-y-auto">
              {filteredCategories.map((cate, index) => (
                <li
                  key={index}
                  className="py-1 px-2 hover:bg-gray-600 rounded-lg cursor-pointer"
                  onClick={() => {
                    setActiveCategory(cate.category); // Only set category
                  }}
                >
                  <h1 className="flex items-center gap-2">
                    <div className={`${cate.div} h-3 w-3`}></div>
                    {cate.category} x {cate.total}
                  </h1>
                  <div className="text-gray-500">{cate.message}</div>
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* Tags Dropdown */}
        {isTagDropdownVisible && activeTab === "tags" && (
          <div className="absolute bg-gray-700 rounded-lg shadow-lg mt-2 py-2 px-4 tag-dropdown">
            <input
              type="text"
              className="w-full p-2 mb-2 rounded-lg bg-gray-800 text-white"
              placeholder="Search Tags"
              value={tagSearchTerm}
              onChange={(e) => setTagSearchTerm(e.target.value)}
            />
            <ul className="flex flex-col h-42 overflow-y-auto">
              {filteredTags.map((tag, index) => (
                <li
                  key={index}
                  className="py-1 px-2 hover:bg-gray-600 rounded-lg cursor-pointer"
                  onClick={() => {
                    setActiveTag(tag); // Only set tag
                  }}
                >
                  {tag}
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* Reviews Table */}
        {(activeCategory || activeTag || activeTab === "hot" || activeTab === "latest") && (
          <table className="w-full border-collapse mt-4">
            <thead>
              <tr className="bg-gray-900">
                <th className="p-2 text-left">Topic</th>
                <th className="p-2">Replies</th>
                <th className="p-2">Views</th>
                <th className="p-2">Activity</th>
              </tr>
            </thead>
            <tbody>
              {getFilteredReviews().map((review, index) => (
                <tr key={index} className="border-b border-gray-700">
                  <td className="p-2">{review.topic}</td>
                  <td className="p-2 text-center">{review.replies}</td>
                  <td className="p-2 text-center">{review.views}</td>
                  <td className="p-2 text-center">{review.activity}</td>
                </tr>
              ))}
            </tbody>  
          </table>
        )}
      </>
    );
  };

  export default CategoriesTagsReviews;
